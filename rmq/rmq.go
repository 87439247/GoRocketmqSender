// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rmq

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
  "context"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Topic
//  - Flag
//  - Properties
//  - Body
type RmqMessage struct {
  Topic string `thrift:"Topic,1" db:"Topic" json:"Topic"`
  Flag int32 `thrift:"Flag,2" db:"Flag" json:"Flag"`
  Properties map[string]string `thrift:"Properties,3" db:"Properties" json:"Properties"`
  Body []byte `thrift:"Body,4" db:"Body" json:"Body"`
}

func NewRmqMessage() *RmqMessage {
  return &RmqMessage{}
}


func (p *RmqMessage) GetTopic() string {
  return p.Topic
}

func (p *RmqMessage) GetFlag() int32 {
  return p.Flag
}

func (p *RmqMessage) GetProperties() map[string]string {
  return p.Properties
}

func (p *RmqMessage) GetBody() []byte {
  return p.Body
}
func (p *RmqMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RmqMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Topic = v
}
  return nil
}

func (p *RmqMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *RmqMessage)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Properties[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RmqMessage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *RmqMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RmqMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RmqMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Topic", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Topic: ", p), err) }
  if err := oprot.WriteString(string(p.Topic)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Topic (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Topic: ", p), err) }
  return err
}

func (p *RmqMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Flag", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Flag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Flag: ", p), err) }
  return err
}

func (p *RmqMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Properties", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Properties: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Properties: ", p), err) }
  return err
}

func (p *RmqMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Body", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Body: ", p), err) }
  if err := oprot.WriteBinary(p.Body); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Body (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Body: ", p), err) }
  return err
}

func (p *RmqMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RmqMessage(%+v)", *p)
}

// Attributes:
//  - MsgId
//  - QueueId
//  - QueueOffset
//  - IsSendOK
type RmqSendResult_ struct {
  MsgId string `thrift:"MsgId,1" db:"MsgId" json:"MsgId"`
  QueueId string `thrift:"QueueId,2" db:"QueueId" json:"QueueId"`
  QueueOffset string `thrift:"QueueOffset,3" db:"QueueOffset" json:"QueueOffset"`
  IsSendOK bool `thrift:"IsSendOK,4" db:"IsSendOK" json:"IsSendOK"`
}

func NewRmqSendResult_() *RmqSendResult_ {
  return &RmqSendResult_{}
}


func (p *RmqSendResult_) GetMsgId() string {
  return p.MsgId
}

func (p *RmqSendResult_) GetQueueId() string {
  return p.QueueId
}

func (p *RmqSendResult_) GetQueueOffset() string {
  return p.QueueOffset
}

func (p *RmqSendResult_) GetIsSendOK() bool {
  return p.IsSendOK
}
func (p *RmqSendResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RmqSendResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MsgId = v
}
  return nil
}

func (p *RmqSendResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QueueId = v
}
  return nil
}

func (p *RmqSendResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QueueOffset = v
}
  return nil
}

func (p *RmqSendResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsSendOK = v
}
  return nil
}

func (p *RmqSendResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RmqSendResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RmqSendResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MsgId: ", p), err) }
  if err := oprot.WriteString(string(p.MsgId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MsgId: ", p), err) }
  return err
}

func (p *RmqSendResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("QueueId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:QueueId: ", p), err) }
  if err := oprot.WriteString(string(p.QueueId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.QueueId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:QueueId: ", p), err) }
  return err
}

func (p *RmqSendResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("QueueOffset", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:QueueOffset: ", p), err) }
  if err := oprot.WriteString(string(p.QueueOffset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.QueueOffset (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:QueueOffset: ", p), err) }
  return err
}

func (p *RmqSendResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IsSendOK", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:IsSendOK: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSendOK)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsSendOK (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:IsSendOK: ", p), err) }
  return err
}

func (p *RmqSendResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RmqSendResult_(%+v)", *p)
}

type RmqThriftProdService interface {
  // Parameters:
  //  - Msg
  Send(msg *RmqMessage) (r *RmqSendResult_, err error)
}

type RmqThriftProdServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewRmqThriftProdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RmqThriftProdServiceClient {
  return &RmqThriftProdServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRmqThriftProdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RmqThriftProdServiceClient {
  return &RmqThriftProdServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Msg
func (p *RmqThriftProdServiceClient) Send(msg *RmqMessage) (r *RmqSendResult_, err error) {
  if err = p.sendSend(msg); err != nil { return }
  return p.recvSend()
}

func (p *RmqThriftProdServiceClient) sendSend(msg *RmqMessage)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("send", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RmqThriftProdServiceSendArgs{
  Msg : msg,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RmqThriftProdServiceClient) recvSend() (value *RmqSendResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "send" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "send failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "send failed: invalid message type")
    return
  }
  result := RmqThriftProdServiceSendResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

type RmqThriftProdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RmqThriftProdService
}

func (p *RmqThriftProdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RmqThriftProdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RmqThriftProdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRmqThriftProdServiceProcessor(handler RmqThriftProdService) *RmqThriftProdServiceProcessor {

  self4 := &RmqThriftProdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["send"] = &rmqThriftProdServiceProcessorSend{handler:handler}
return self4
}

func (p *RmqThriftProdServiceProcessor) Process(ctx context.Context,iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(nil,seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type rmqThriftProdServiceProcessorSend struct {
  handler RmqThriftProdService
}

func (p *rmqThriftProdServiceProcessorSend) Process(ctx context.Context,seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RmqThriftProdServiceSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RmqThriftProdServiceSendResult{}
var retval *RmqSendResult_
  var err2 error
  if retval, err2 = p.handler.Send(args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send: " + err2.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("send", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Msg
type RmqThriftProdServiceSendArgs struct {
  Msg *RmqMessage `thrift:"msg,1" db:"msg" json:"msg"`
}

func NewRmqThriftProdServiceSendArgs() *RmqThriftProdServiceSendArgs {
  return &RmqThriftProdServiceSendArgs{}
}

var RmqThriftProdServiceSendArgs_Msg_DEFAULT *RmqMessage
func (p *RmqThriftProdServiceSendArgs) GetMsg() *RmqMessage {
  if !p.IsSetMsg() {
    return RmqThriftProdServiceSendArgs_Msg_DEFAULT
  }
return p.Msg
}
func (p *RmqThriftProdServiceSendArgs) IsSetMsg() bool {
  return p.Msg != nil
}

func (p *RmqThriftProdServiceSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RmqThriftProdServiceSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Msg = &RmqMessage{}
  if err := p.Msg.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Msg), err)
  }
  return nil
}

func (p *RmqThriftProdServiceSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RmqThriftProdServiceSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err) }
  if err := p.Msg.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Msg), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err) }
  return err
}

func (p *RmqThriftProdServiceSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RmqThriftProdServiceSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RmqThriftProdServiceSendResult struct {
  Success *RmqSendResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRmqThriftProdServiceSendResult() *RmqThriftProdServiceSendResult {
  return &RmqThriftProdServiceSendResult{}
}

var RmqThriftProdServiceSendResult_Success_DEFAULT *RmqSendResult_
func (p *RmqThriftProdServiceSendResult) GetSuccess() *RmqSendResult_ {
  if !p.IsSetSuccess() {
    return RmqThriftProdServiceSendResult_Success_DEFAULT
  }
return p.Success
}
func (p *RmqThriftProdServiceSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RmqThriftProdServiceSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RmqThriftProdServiceSendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RmqSendResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RmqThriftProdServiceSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RmqThriftProdServiceSendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RmqThriftProdServiceSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RmqThriftProdServiceSendResult(%+v)", *p)
}


